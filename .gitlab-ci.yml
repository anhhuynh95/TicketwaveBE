# Set environment variables for the CI pipeline
variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dspring.profiles.active=test" # Disables the Gradle daemon to ensure a clean environment for each build
  SPRING_PROFILES_ACTIVE: test
  JWT_SECRET_TEST: X8nV7pZ5qPmJ9kT4R6YqP5fL3bXe7WvPnLpOfMqXpQ6WzX9nMnXq

# Define the pipeline stages that will run in sequence
stages:
  - build
  - test
  - code_quality
  - build_docker_image


build:
  stage: build
  script:
    - ./gradlew assemble
  artifacts:
        paths:
          - build/libs/Ticketwave_S3-0.0.1-SNAPSHOT.jar  #Save the generated JAR file as an artifact for use in later stages

test:
  stage: test
  script:
    - echo "JWT_SECRET_TEST=$JWT_SECRET_TEST"
    - echo "Running tests with SPRING_PROFILES_ACTIVE=test"
    - ./gradlew clean test jacocoTestReport # Run tests and generate coverage report
  artifacts:
    paths:
      - build/reports/jacoco/test/jacocoTestReport.xml # Save Jacoco report for SonarQube
  dependencies:
    - build  #Ensure that this stage has access to the artifacts (the JAR file) from the build stage

sonar:
  stage: code_quality
  script:
    - ./gradlew sonarqube  # Run SonarQube analysis
  dependencies:
    - test  # Ensure SonarQube can use the test results and coverage report

build_docker_image:
  stage: build_docker_image
  script:
    - docker build -t spring-boot-app:latest .  # Build the Docker image using the Dockerfile in the repository and tag it as 'latest'
  dependencies:
    - build


